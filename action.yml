name: 'YLiu Blog Engine'
description: '基于 GitHub Issues 的现代博客解决方案'
author: 'Young Liu'

branding:
  icon: 'book'
  color: 'blue'

# 1. 更新 Inputs 以匹配新的 AI 配置
inputs:
  GITHUB_TOKEN:
    description: 'GitHub Token，用于读取 Issues（推荐使用以避免 API 限流）'
    required: false
  NEXT_PUBLIC_GITHUB_REPOSITORY:
    description: '内容仓库地址，格式：owner/repo。默认为当前仓库。'
    required: false
    default: ${{ github.repository }}
  NEXT_PUBLIC_BLOG_TITLE:
    description: '博客标题'
    required: false
  NEXT_PUBLIC_BLOG_AUTHOR:
    description: '作者名称'
    required: false
  NEXT_PUBLIC_FOOTER_TEXT:
    description: '页脚文本'
    required: false
  NEXT_PUBLIC_BASE_PATH:
    description: '站点基础路径 (例如 /blog)'
    required: false
  NEXT_PUBLIC_SITE_URL:
    description: '站点的完整 URL，用于生成 SEO 元数据'
    required: false
  NEXT_PUBLIC_HEADER_CONFIG:
    description: 'Header 菜单配置（JSON 字符串）'
    required: false
  # SEO 兜底配置
  NEXT_PUBLIC_SEO_DESCRIPTION:
    description: '用于 SEO 的站点描述 (无 AI 时使用)'
    required: false
  NEXT_PUBLIC_SEO_KEYWORDS:
    description: '用于 SEO 的站点关键词，用逗号分隔 (无 AI 时使用)'
    required: false
  # AI 配置 (细粒度)
  AI_POSTS_SEO_URL:
    description: '文章 SEO 优化的 AI 服务 URL'
    required: false
  AI_POSTS_SEO_API_KEY:
    description: '文章 SEO 优化的 AI 服务 API Key'
    required: false
  AI_COLUMNS_URL:
    description: '专栏分析的 AI 服务 URL'
    required: false
  AI_COLUMNS_API_KEY:
    description: '专栏分析的 AI 服务 API Key'
    required: false
  AI_SITE_SEO_URL:
    description: '站点 SEO 汇总的 AI 服务 URL'
    required: false
  AI_SITE_SEO_API_KEY:
    description: '站点 SEO 汇总的 AI 服务 API Key'
    required: false
  # AI 批处理配置
  COLUMN_DELIMITERS:
    description: '用于识别专栏的标题分隔符（逗号分隔）'
    required: false
  COLUMN_MIN_ARTICLES:
    description: '一个专栏至少需要包含的文章数量'
    required: false
  COLUMN_MIN_PREFIX_LENGTH:
    description: '自动识别专栏所需的最短公共前缀长度'
    required: false
  AI_USER_ID:
    description: '调用 AI 服务的用户标识符'
    required: false
  AI_MAX_CHARS_PER_BATCH:
    description: 'AI 处理时，每个批次的最大字符数'
    required: false
  AI_SINGLE_ARTICLE_THRESHOLD:
    description: '单篇文章大小超过此阈值将独立处理'
    required: false
  AI_MAX_ARTICLES_PER_BATCH:
    description: 'AI 处理时，每个批次的最大文章数量'
    required: false
  AI_ARTICLE_TRUNCATE_LENGTH:
    description: '为避免超长，输入给 AI 的文章内容将被截断到此长度'
    required: false
  AI_TRUNCATE_SUFFIX:
    description: '文章被截断时添加的后缀'
    required: false
  AI_ENABLE_PROCESSING:
    description: '是否启用 AI 处理'
    required: false
  AI_MAX_CONCURRENT_REQUESTS:
    description: 'AI 请求的最高并发数'
    required: false

  # -- 缓存与调试 --
  ENABLE_CACHE:
    description: '是否启用缓存以加速 AI 处理。在遇到缓存问题时可设为 false 以强制刷新。'
    required: false
    default: 'true'

outputs:
  page-url:
    description: '部署后的网站 URL'
    value: ${{ steps.deployment.outputs.page_url }}

runs:
  using: 'composite'
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'

    - name: Install Dependencies
      shell: bash
      run: pnpm install

    - name: Restore cache
      if: ${{ inputs.ENABLE_CACHE == 'true' }}
      uses: actions/cache@v4
      with:
        path: packages/scripts/src/data/local-cache.json
        key: ${{ runner.os }}-yliu-blog-engine-cache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-yliu-blog-engine-cache-

    - name: Download user assets (about.md)
      shell: bash
      run: |
        ABOUT_URL="https://raw.githubusercontent.com/${{ inputs.NEXT_PUBLIC_GITHUB_REPOSITORY }}/main/about.md"
        # Download about.md to the root, where the script expects it.
        ABOUT_PATH="about.md" 
        if curl -s --head --fail "$ABOUT_URL" > /dev/null; then
          echo "Found about.md. Downloading to $ABOUT_PATH..."
          curl -sL "$ABOUT_URL" -o "$ABOUT_PATH"
        else
          echo "No custom about.md found in user repository."
        fi

    - name: Create .env file for scripts
      shell: bash
      run: |
        ENV_FILE="packages/scripts/.env"
        echo "Creating .env file at $ENV_FILE"
        echo "GITHUB_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $ENV_FILE
        echo "NEXT_PUBLIC_GITHUB_REPOSITORY=${{ inputs.NEXT_PUBLIC_GITHUB_REPOSITORY }}" >> $ENV_FILE
        echo "NEXT_PUBLIC_BLOG_TITLE=${{ inputs.NEXT_PUBLIC_BLOG_TITLE }}" >> $ENV_FILE
        echo "NEXT_PUBLIC_BLOG_AUTHOR=${{ inputs.NEXT_PUBLIC_BLOG_AUTHOR }}" >> $ENV_FILE
        echo "NEXT_PUBLIC_FOOTER_TEXT=${{ inputs.NEXT_PUBLIC_FOOTER_TEXT }}" >> $ENV_FILE
        echo "NEXT_PUBLIC_BASE_PATH=${{ inputs.NEXT_PUBLIC_BASE_PATH }}" >> $ENV_FILE
        echo "NEXT_PUBLIC_SITE_URL=${{ inputs.NEXT_PUBLIC_SITE_URL }}" >> $ENV_FILE
        echo "NEXT_PUBLIC_HEADER_CONFIG=${{ inputs.NEXT_PUBLIC_HEADER_CONFIG }}" >> $ENV_FILE
        echo "NEXT_PUBLIC_SEO_DESCRIPTION=${{ inputs.NEXT_PUBLIC_SEO_DESCRIPTION }}" >> $ENV_FILE
        echo "NEXT_PUBLIC_SEO_KEYWORDS=${{ inputs.NEXT_PUBLIC_SEO_KEYWORDS }}" >> $ENV_FILE
        echo "AI_POSTS_SEO_URL=${{ inputs.AI_POSTS_SEO_URL }}" >> $ENV_FILE
        echo "AI_POSTS_SEO_API_KEY=${{ inputs.AI_POSTS_SEO_API_KEY }}" >> $ENV_FILE
        echo "AI_COLUMNS_URL=${{ inputs.AI_COLUMNS_URL }}" >> $ENV_FILE
        echo "AI_COLUMNS_API_KEY=${{ inputs.AI_COLUMNS_API_KEY }}" >> $ENV_FILE
        echo "AI_SITE_SEO_URL=${{ inputs.AI_SITE_SEO_URL }}" >> $ENV_FILE
        echo "AI_SITE_SEO_API_KEY=${{ inputs.AI_SITE_SEO_API_KEY }}" >> $ENV_FILE
        echo "AI_MAX_CHARS_PER_BATCH=${{ inputs.AI_MAX_CHARS_PER_BATCH }}" >> $ENV_FILE
        echo "AI_SINGLE_ARTICLE_THRESHOLD=${{ inputs.AI_SINGLE_ARTICLE_THRESHOLD }}" >> $ENV_FILE
        echo "AI_MAX_ARTICLES_PER_BATCH=${{ inputs.AI_MAX_ARTICLES_PER_BATCH }}" >> $ENV_FILE
        echo "AI_ARTICLE_TRUNCATE_LENGTH=${{ inputs.AI_ARTICLE_TRUNCATE_LENGTH }}" >> $ENV_FILE
        echo "AI_TRUNCATE_SUFFIX=${{ inputs.AI_TRUNCATE_SUFFIX }}" >> $ENV_FILE
        echo "AI_ENABLE_PROCESSING=${{ inputs.AI_ENABLE_PROCESSING }}" >> $ENV_FILE
        echo "AI_MAX_CONCURRENT_REQUESTS=${{ inputs.AI_MAX_CONCURRENT_REQUESTS }}" >> $ENV_FILE
        echo "COLUMN_MIN_PREFIX_LENGTH=${{ inputs.COLUMN_MIN_PREFIX_LENGTH }}" >> $ENV_FILE
        echo "AI_USER_ID=${{ inputs.AI_USER_ID }}" >> $ENV_FILE
        echo "COLUMN_DELIMITERS=${{ inputs.COLUMN_DELIMITERS }}" >> $ENV_FILE
        echo "COLUMN_MIN_ARTICLES=${{ inputs.COLUMN_MIN_ARTICLES }}" >> $ENV_FILE
        echo "--- .env content ---"
        cat $ENV_FILE
        echo "--------------------"

    - name: Fetch data
      shell: bash
      run: pnpm --filter @yliu/scripts build:data

    - name: Build web app for GitHub Pages
      shell: bash
      run: pnpm --filter @yliu/web build

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'apps/web/out'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
