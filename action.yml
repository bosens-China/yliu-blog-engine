name: "YLiu Blog Engine"
description: "基于 GitHub Issues 的现代博客解决方案，让你只需写 Issues 就能拥有漂亮的个人博客"
author: "Young Liu <yliu>"

branding:
  icon: "book"
  color: "blue"

inputs:
  GITHUB_TOKEN:
    description: "GitHub Token，用于读取 Issues（推荐使用以避免 API 限流）"
    required: false
    default: ""
  NEXT_PUBLIC_GITHUB_REPOSITORY:
    description: "仓库地址，格式：owner/repo。默认为当前仓库。"
    required: false
    default: ${{ github.repository }}
  NEXT_PUBLIC_BLOG_TITLE:
    description: "博客标题"
    required: false
    default: "${{ github.repository_owner }}的个人博客"
  NEXT_PUBLIC_FOOTER_TEXT:
    description: "页脚文本"
    required: false
    default: ""
  NEXT_PUBLIC_BASE_PATH:
    description: "站点基础路径"
    required: false
    default: ""
  NEXT_PUBLIC_HEADER_CONFIG:
    description: "Header 菜单配置（JSON 字符串）"
    required: false
    default: ""
  COLUMN_MIN_PREFIX_LENGTH:
    description: "自动识别专栏所需的最短公共前缀长度"
    required: false
    default: "6"
  AI_SITE_API_KEY:
    description: "用于站点分析的 AI 服务 API Key"
    required: false
    default: ""
  AI_SITE_WORKFLOW_URL:
    description: "用于站点分析的 AI 服务工作流 URL"
    required: false
    default: ""
  AI_POSTS_API_KEY:
    description: "用于文章增强的 AI 服务 API Key"
    required: false
    default: ""
  AI_POSTS_WORKFLOW_URL:
    description: "用于文章增强的 AI 服务工作流 URL"
    required: false
    default: ""
  AI_USER_ID:
    description: "调用 AI 服务的用户标识符"
    required: false
    default: "${{ github.actor }}"
  NEXT_PUBLIC_SITE_URL:
    description: "站点 URL，用于生成 Metadata"
    required: false
    default: ""
  NEXT_PUBLIC_BLOG_AUTHOR:
    description: "作者名称，用于生成 Metadata"
    required: false
    default: ""
  NEXT_PUBLIC_SEO_DESCRIPTION:
    description: "用于 SEO 的站点描述"
    required: false
    default: ""
  NEXT_PUBLIC_SEO_KEYWORDS:
    description: "用于 SEO 的站点关键词，用逗号分隔"
    required: false
    default: ""

outputs:
  site-url:
    description: "部署后的网站 URL"
  build-time:
    description: "构建耗时"

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "22"
        cache: "pnpm"

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10

    - name: Cache Dify AI data
      uses: actions/cache@v4
      with:
        path: blog-engine/src/data/dify-cache.json
        key: dify-cache-${{ inputs.NEXT_PUBLIC_GITHUB_REPOSITORY }}

    - name: Checkout blog engine
      uses: actions/checkout@v4
      with:
        repository: "yliu/blog-engine"
        path: "blog-engine"

    - name: Install dependencies
      shell: bash
      run: |
        cd blog-engine
        pnpm install

    - name: Download user assets (about.md & favicon)
      shell: bash
      run: |
        # About Page
        ABOUT_URL="https://raw.githubusercontent.com/${{ inputs.NEXT_PUBLIC_GITHUB_REPOSITORY }}/main/about.md"
        ABOUT_PATH="blog-engine/about.md"
        if curl -s --head --fail "$ABOUT_URL" > /dev/null; then
          echo "Found about.md. Downloading..."
          curl -s "$ABOUT_URL" -o "$ABOUT_PATH"
        else
          echo "No custom about.md found in user repository."
        fi

        # Favicon
        FAVICON_SVG_URL="https://raw.githubusercontent.com/${{ inputs.NEXT_PUBLIC_GITHUB_REPOSITORY }}/main/favicon.svg"
        FAVICON_PNG_URL="https://raw.githubusercontent.com/${{ inputs.NEXT_PUBLIC_GITHUB_REPOSITORY }}/main/favicon.png"
        PUBLIC_PATH="blog-engine/public"

        # 优先下载 SVG
        if curl -s --head --fail "$FAVICON_SVG_URL" > /dev/null; then
          echo "Found favicon.svg. Downloading..."
          curl -s "$FAVICON_SVG_URL" -o "${PUBLIC_PATH}/favicon.svg"
          rm -f "${PUBLIC_PATH}/favicon.ico" # 移除默认图标
        # 否则尝试 PNG
        elif curl -s --head --fail "$FAVICON_PNG_URL" > /dev/null; then
          echo "Found favicon.png. Downloading..."
          curl -s "$FAVICON_PNG_URL" -o "${PUBLIC_PATH}/favicon.png"
          rm -f "${PUBLIC_PATH}/favicon.ico" # 移除默认图标
        else
          echo "No custom favicon found in user repository. Using default."
        fi

    - name: Set environment variables
      shell: bash
      run: |
        cd blog-engine
        echo "GITHUB_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> .env.local
        echo "NEXT_PUBLIC_GITHUB_REPOSITORY=${{ inputs.NEXT_PUBLIC_GITHUB_REPOSITORY }}" >> .env.local
        echo "NEXT_PUBLIC_BLOG_TITLE=${{ inputs.NEXT_PUBLIC_BLOG_TITLE }}" >> .env.local
        echo "NEXT_PUBLIC_FOOTER_TEXT=${{ inputs.NEXT_PUBLIC_FOOTER_TEXT }}" >> .env.local
        echo "NEXT_PUBLIC_BASE_PATH=${{ inputs.NEXT_PUBLIC_BASE_PATH }}" >> .env.local
        echo "NEXT_PUBLIC_HEADER_CONFIG=${{ inputs.NEXT_PUBLIC_HEADER_CONFIG }}" >> .env.local
        echo "COLUMN_MIN_PREFIX_LENGTH=${{ inputs.COLUMN_MIN_PREFIX_LENGTH }}" >> .env.local
        echo "AI_SITE_API_KEY=${{ inputs.AI_SITE_API_KEY }}" >> .env.local
        echo "AI_SITE_WORKFLOW_URL=${{ inputs.AI_SITE_WORKFLOW_URL }}" >> .env.local
        echo "AI_POSTS_API_KEY=${{ inputs.AI_POSTS_API_KEY }}" >> .env.local
        echo "AI_POSTS_WORKFLOW_URL=${{ inputs.AI_POSTS_WORKFLOW_URL }}" >> .env.local
        echo "AI_USER_ID=${{ inputs.AI_USER_ID }}" >> .env.local
        echo "NEXT_PUBLIC_SITE_URL=${{ inputs.NEXT_PUBLIC_SITE_URL }}" >> .env.local
        echo "NEXT_PUBLIC_BLOG_AUTHOR=${{ inputs.NEXT_PUBLIC_BLOG_AUTHOR }}" >> .env.local
        echo "NEXT_PUBLIC_SEO_DESCRIPTION=${{ inputs.NEXT_PUBLIC_SEO_DESCRIPTION }}" >> .env.local
        echo "NEXT_PUBLIC_SEO_KEYWORDS=${{ inputs.NEXT_PUBLIC_SEO_KEYWORDS }}" >> .env.local

    - name: Fetch data and build
      shell: bash
      run: |
        cd blog-engine
        pnpm install
        pnpm run build:data
        pnpm run build

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: "blog-engine/out"

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
